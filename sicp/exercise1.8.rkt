#lang racket
;(define (sqrt x)
;  (define (good-enough? guess)
;    (< (abs (- (square guess) x)) 0.001) )
;  (define (square guess)
;    (* guess guess) )
;  (define (improve guess)
;    (average guess (/ x guess)))
;  (define (average a b)
;    (/ (+ a b) 2))
;  (define (sqrt-iter guess)
;    (if (good-enough? guess)
;        guess
;        (sqrt-iter (improve guess))))
;  (sqrt-iter 1.0))
;(sqrt 4)

;exercise 1.8  (x/y^2 + 2y) / 3
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001) )
  (define (square guess)
    (* guess guess) )
  (define (improve guess)
    (/ (+ (/ x (square guess) ) (* 2 guess) ) 3) )
  (define (average a b)
    (/ (+ a b) 2))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
(sqrt 4)