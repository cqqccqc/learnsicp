#lang racket

(define add1
  (lambda (n) (+ n 1)))
(provide add1)

(add1 10)

(define sub1
  (lambda (n) (- n 1)))
(provide sub1)

(define o+
  (lambda (n m)
    (cond ((zero? m) n)
          (else (add1 (o+ n (sub1 m))))
          )
    ))
(o+ 3 4)
(provide o+)

(define o-
  (lambda (n m)
    (cond ((zero? m) n)
          (else (sub1 (o- n (sub1 m)))))))
(o- 3 2)
(provide o-)


(define addtup
  (lambda (tup)
    (cond ((null? tup) 0)
          (else (o+ (car tup)(addtup (cdr tup)))))))

(addtup '(1 2 3 4 5))

(define o*
  (lambda (n m)
    (cond ((zero? m) 0)
          (else (o+ n (o* n (sub1 m)))))))
(o* 10 20)
(provide o*)

(define tup+
  (lambda (tup1 tup2)
    (cond ((null? tup1) tup2)
          ((null? tup2) tup1)
          (else
           (cons (o+ (car tup1)(car tup2))
                 (tup+ (cdr tup1)(cdr tup2)))))))

(tup+ '(1 2 3) '(3 2 1))

(define o>
  (lambda (n m)
    (cond ((zero? m) #t)
          ((zero? n) #f)
          (else (o> (sub1 n)(sub1 m)))
          )))
(o> 1 2)
(o> 2 1)

(define o<
  (lambda (n m)
    (cond ((zero? m) #f)
          ((zero? n) #t)
          (else (o< (sub1 n)(sub1 m)))
          )))
(o< 1 2)
(o< 2 1)

(define o=
  (lambda (n m)
    (cond ((o> n m) #f)
          ((o< n m) #f)
          (else #t)
          )))
(o= 1 1)

(define oe
  (lambda (n m)
    (cond ((zero? m) 1)
          (else (o* n (oe n(sub1 m)))))))
(provide oe)
(oe 2 2)
(oe 2 4)

(define oq
  (lambda (n m)
    (cond ((o< n m) 0)
          (else (add1 (oq (o- n m) m))))))
(oq 5 2)

(define length
  (lambda (lat)
    (cond ((null? lat) 0)
          (add1(length(cdr lat))))))

(length '(1 2 3 4 5 6 7 8 9))

(define pick
  (lambda (n lat)
    (cond ((zero? (sub1 n))(car lat))
          (else (pick (sub1 n)(cdr lat))))))
(pick 3 '(1 2 3 4 5))

(define rempick
  (lambda (n lat)
    (cond ((zero? (sub1 n))(cdr lat))
          (else (cons (car lat)(rempick(sub1 n)(cdr lat)))))))
(rempick 3 '(1 2 3 4 5))

(define no-nums
  (lambda (lat)
    (cond ((null? lat) '())
          (else (cond ((number? (car lat)) (no-nums(cdr lat)))
                      (else (cons (car lat)(no-nums (cdr lat)))))))))

(no-nums '(5 "pear" 6 "prunes" 9 "dates"))

(define all-nums
  (lambda (lat)
    (cond ((null? lat) '())
          (else (cond ((number? (car lat))(cons (car lat)(all-nums (cdr lat))))
                      (else (all-nums (cdr lat))))))))

(all-nums '(5 "pear" 6 "prunes" 9 "dates"))

(define eqan?
  (lambda (a1 a2)
    (cond
      ((and (number? a1)(number? a2))(= a1 a2))
      ((or (number? a1)(number? a2))#f)
      (else (eq? a1 a2)))))
(provide eqan?)

(define occur
  (lambda (a lat)
    (cond ((null? lat)0)
          (else (cond ((eq? (car lat) a)(add1 (occur a (cdr lat))))
                      (else (occur a (cdr lat))))))))
(occur 2 '(1 2 3 2 4 2 5))

(define one?
  (lambda (n)
    (= n 1)))

(define rempick2
  (lambda (n lat)
    (cond ((one? n)(cdr lat))
          (else (cons (car lat)(rempick(sub1 n)(cdr lat)))))))
(rempick2 3 '(1 2 3 4 5))